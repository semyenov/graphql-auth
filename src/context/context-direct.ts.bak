/**
 * Enhanced Context for Direct Pothos Resolvers
 * 
 * This simplified context is used with direct Pothos resolvers.
 * Following Pothos best practices, Prisma client is NOT included in context
 * to improve TypeScript performance and developer experience.
 */

import { prisma } from '../data/database/client'
import { createDataLoaders, type DataLoaders } from '../data/loaders'
import { createEnhancedLoaders, type Loaders } from '../data/loaders/loaders'
import { createEnhancedAuthScopes, type EnhancedAuthScopes } from '../core/auth/scopes'
import type { Context as BaseContext } from './types.d'

export interface Context extends BaseContext {
  // Original DataLoaders for batch loading (optional for tests)
  loaders?: DataLoaders
  // Enhanced DataLoaders for Pothos loadable objects
  enhancedLoaders?: Loaders
  // Method to create enhanced auth scopes
  createScopes?: () => EnhancedAuthScopes
}

/**
 * Create enhanced context for direct Pothos resolvers
 */
export function enhanceContext(baseContext: BaseContext): Context {
  try {
    // Create enhanced context without Prisma
    const enhancedContext: Context = {
      ...baseContext,
      // Add method to create enhanced auth scopes
      createScopes: () => createEnhancedAuthScopes(enhancedContext),
    }
    
    // Create DataLoaders (only if available)
    try {
      // Create data loaders
      enhancedContext.loaders = createDataLoaders()
      // Create enhanced loaders with direct Prisma reference
      enhancedContext.enhancedLoaders = createEnhancedLoaders(prisma)
    } catch (error) {
      // DataLoaders are optional for tests
      console.debug('DataLoaders not available:', error)
    }
    
    return enhancedContext
  } catch (error) {
    console.error('Error enhancing context:', error)
    throw error
  }
}