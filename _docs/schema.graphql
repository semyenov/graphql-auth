scalar DID

scalar DateTime

scalar JSON

type Mutation {
  """Create a new draft post for the authenticated user"""
  createDraft(
    """Post data including title and optional content"""
    data: PostCreateInput!
  ): Post

  """Delete a post permanently"""
  deletePost(
    """The global ID of the post to delete"""
    id: ID!
  ): Post

  """Increment the view count of a post"""
  incrementPostViewCount(
    """The global ID of the post to increment view count"""
    id: ID!
  ): Post

  """Authenticate user and return JWT token"""
  login(
    """Email address of the account"""
    email: String!

    """Account password"""
    password: String!
  ): String

  """Create a new user account and return JWT token"""
  signup(
    """Unique email address for the account"""
    email: String!

    """Optional display name for the user"""
    name: String

    """Password for the account (min 8 characters)"""
    password: String!
  ): String

  """Toggle the publication status of a post"""
  togglePublishPost(
    """The global ID of the post to toggle"""
    id: ID!
  ): Post
}

interface Node {
  id: ID!
}

scalar ObjectID

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Post implements Node {
  author: User
  content: String
  createdAt: DateTime
  id: ID!
  published: Boolean
  title: String
  updatedAt: DateTime
  viewCount: Int
}

input PostCreateInput {
  content: String
  title: String!
}

input PostOrderByUpdatedAtInput {
  updatedAt: SortOrder!
}

type Query {
  drafts(after: String, before: String, first: Int, last: Int, userId: ID!): QueryDraftsConnection
  feed(after: String, before: String, first: Int, last: Int, searchString: String): QueryFeedConnection
  me: User
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  post(id: ID!): Post
  user(id: ID!): User
  users(after: String, before: String, first: Int, last: Int): QueryUsersConnection
}

type QueryDraftsConnection {
  edges: [QueryDraftsConnectionEdge]
  pageInfo: PageInfo!
}

type QueryDraftsConnectionEdge {
  cursor: String!
  node: Post
}

type QueryFeedConnection {
  edges: [QueryFeedConnectionEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type QueryFeedConnectionEdge {
  cursor: String!
  node: Post
}

type QueryUsersConnection {
  edges: [QueryUsersConnectionEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type QueryUsersConnectionEdge {
  cursor: String!
  node: User
}

enum SortOrder {
  asc
  desc
}

scalar UUID

type User implements Node {
  email: String
  id: ID!
  name: String
  posts: [Post!]
}

input UserUniqueInput {
  email: String
  id: Int
}