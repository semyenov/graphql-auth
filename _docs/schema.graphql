"""Legacy authentication response"""
type AuthResponse {
  """JWT access token (deprecated, use AuthTokens instead)"""
  token: String
}

"""Authentication tokens response"""
type AuthTokens {
  """JWT access token for API requests"""
  accessToken: String

  """Refresh token for obtaining new access tokens"""
  refreshToken: String
}

input BooleanFilter {
  """Exact boolean match"""
  equals: Boolean

  """Boolean does not equal this value"""
  not: Boolean
}

input CreatePostInput {
  content: String
  published: Boolean = false
  title: String!
}

scalar DID

scalar DateTime

input DateTimeFilter {
  """Exact date match"""
  equals: DateTime

  """Date after this value"""
  gt: DateTime

  """Date on or after this value"""
  gte: DateTime

  """Date before this value"""
  lt: DateTime

  """Date on or before this value"""
  lte: DateTime
}

input IntFilter {
  """Exact number match"""
  equals: Int

  """Greater than this value"""
  gt: Int

  """Greater than or equal to this value"""
  gte: Int

  """Value is in this list"""
  in: [Int!]

  """Less than this value"""
  lt: Int

  """Less than or equal to this value"""
  lte: Int

  """Value is not in this list"""
  notIn: [Int!]
}

scalar JSON

type Mutation {
  """Create a new post"""
  createPostDirect(input: CreatePostInput!): Post

  """Delete a post"""
  deletePostDirect(id: ID!): Boolean

  """Increment the view count of a post"""
  incrementPostViewCountDirect(id: ID!): Post

  """Authenticate and receive a token"""
  loginDirect(email: String!, password: String!): String

  """Authenticate and receive access and refresh tokens"""
  loginWithTokens(email: String!, password: String!): AuthTokens

  """Logout user and revoke all refresh tokens"""
  logout: Boolean

  """Refresh access token using a refresh token"""
  refreshToken(refreshToken: String!): AuthTokens

  """Create a new user account"""
  signupDirect(email: String!, name: String, password: String!): String

  """Toggle the publish status of a post"""
  togglePublishPostDirect(id: ID!): Post

  """Update an existing post"""
  updatePostDirect(id: ID!, input: UpdatePostInput!): Post

  """Update the current user profile"""
  updateUserProfile(input: UpdateUserInput!): User
}

interface Node {
  id: ID!
}

scalar ObjectID

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Post implements Node {
  """The user who created this post"""
  author: User

  """The content/body of the post"""
  content: String

  """When the post was first created"""
  createdAt: DateTime

  """A short excerpt from the post content (first 150 characters)"""
  excerpt: String
  id: ID!

  """Whether the current user is the owner of this post"""
  isOwner: Boolean

  """Whether the post is published and visible to the public"""
  published: Boolean

  """Estimated reading time in minutes (assuming 200 words per minute)"""
  readingTimeMinutes: Int

  """The title of the post"""
  title: String

  """When the post was last modified"""
  updatedAt: DateTime

  """Number of times this post has been viewed"""
  viewCount: Int

  """Approximate word count of the post content"""
  wordCount: Int
}

input PostCreateInput {
  """The content/body of the post"""
  content: String

  """The title of the post"""
  title: String!
}

input PostOrderByInput {
  """Order by creation date"""
  createdAt: SortOrder

  """Order by post ID"""
  id: SortOrder

  """Order by published status"""
  published: SortOrder

  """Order by post title"""
  title: SortOrder

  """Order by last update date"""
  updatedAt: SortOrder

  """Order by view count"""
  viewCount: SortOrder
}

input PostOrderByUpdatedAtInput {
  updatedAt: SortOrder!
}

input PostUpdateInput {
  """New content for the post"""
  content: String

  """New published status for the post"""
  published: Boolean

  """New title for the post"""
  title: String
}

input PostWhereInput {
  """Filter posts by author ID"""
  authorId: IntFilter

  """Filter posts by content"""
  content: StringFilter

  """Filter posts by creation date"""
  createdAt: DateTimeFilter

  """Filter posts by published status"""
  published: BooleanFilter

  """Filter posts by title"""
  title: StringFilter

  """Filter posts by last update date"""
  updatedAt: DateTimeFilter

  """Filter posts by view count"""
  viewCount: IntFilter
}

type Query {
  """Get draft posts for the authenticated user"""
  draftsDirect(after: String, before: String, first: Int, last: Int): QueryDraftsDirectConnection

  """Get published posts with optional search"""
  feedDirect(after: String, before: String, first: Int, last: Int, searchString: String): QueryFeedDirectConnection

  """Get the currently authenticated user"""
  meDirect: User

  """Get a post by ID"""
  postDirect(id: ID!): Post

  """Search users by name or email"""
  searchUsersDirect(after: String, before: String, first: Int, last: Int, search: String!): QuerySearchUsersDirectConnection

  """Get a user by ID"""
  userDirect(id: ID!): User

  """Get all users with optional filtering"""
  usersDirect(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, where: UserWhereInput): QueryUsersDirectConnection
}

type QueryDraftsDirectConnection {
  edges: [QueryDraftsDirectConnectionEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type QueryDraftsDirectConnectionEdge {
  cursor: String!
  node: Post
}

type QueryFeedDirectConnection {
  edges: [QueryFeedDirectConnectionEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type QueryFeedDirectConnectionEdge {
  cursor: String!
  node: Post
}

type QuerySearchUsersDirectConnection {
  edges: [QuerySearchUsersDirectConnectionEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type QuerySearchUsersDirectConnectionEdge {
  cursor: String!
  node: User
}

type QueryUsersDirectConnection {
  edges: [QueryUsersDirectConnectionEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type QueryUsersDirectConnectionEdge {
  cursor: String!
  node: User
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  """String contains this value (case-insensitive)"""
  contains: String

  """String ends with this value"""
  endsWith: String

  """Exact string match"""
  equals: String

  """String does not equal this value"""
  not: String

  """String starts with this value"""
  startsWith: String
}

scalar UUID

input UpdatePostInput {
  content: String
  published: Boolean
  title: String
}

input UpdateUserInput {
  email: String
  name: String
}

type User implements Node {
  """Number of unpublished posts by this user"""
  draftsCount: Int
  email: String
  id: ID!
  name: String

  """Total number of posts by this user"""
  postCount: Int
  posts(
    after: String
    before: String
    first: Int
    last: Int

    """Filter posts by published status"""
    published: Boolean
  ): UserPostsConnection

  """Posts created by this user"""
  postsDirect(
    after: String
    before: String
    first: Int
    last: Int

    """Filter by published status"""
    published: Boolean
  ): UserPostsDirectConnection

  """Number of published posts by this user"""
  publishedPostCount: Int

  """Number of published posts by this user"""
  publishedPostsCount: Int
}

input UserOrderByInput {
  """Order by user email"""
  email: SortOrder

  """Order by user ID"""
  id: SortOrder = asc

  """Order by user name"""
  name: SortOrder
}

type UserPostsConnection {
  edges: [UserPostsConnectionEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserPostsConnectionEdge {
  cursor: String!
  node: Post
}

type UserPostsDirectConnection {
  edges: [UserPostsDirectConnectionEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserPostsDirectConnectionEdge {
  cursor: String!
  node: Post
}

input UserSearchInput {
  """Search query"""
  query: String
}

input UserUniqueInput {
  """User email address"""
  email: String

  """User ID"""
  id: Int
}

input UserWhereInput {
  """Filter users by email"""
  email: StringFilter

  """Filter users by name"""
  name: StringFilter
}