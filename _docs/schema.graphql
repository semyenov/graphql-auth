scalar DateTime

type Mutation {
  createDraft(data: PostCreateInput!): Post
  deletePost(id: Int!): Post
  incrementPostViewCount(id: Int!): Post
  login(email: String!, password: String!): String
  signup(email: String!, name: String, password: String!): String
  togglePublishPost(id: Int!): Post
}

type Post {
  author: User
  content: String
  createdAt: DateTime
  id: Int
  published: Boolean
  title: String
  updatedAt: DateTime
  viewCount: Int
}

input PostCreateInput {
  content: String
  title: String!
}

input PostOrderByUpdatedAtInput {
  updatedAt: SortOrder!
}

type Query {
  allUsers: [User!]
  draftsByUser(userUniqueInput: UserUniqueInput!): [Post!]
  feed(orderBy: PostOrderByUpdatedAtInput, searchString: String, skip: Int, take: Int): [Post!]
  me: User
  postById(id: Int): Post
}

enum SortOrder {
  asc
  desc
}

type User {
  email: String
  id: Int
  name: String
  posts: [Post!]
}

input UserUniqueInput {
  email: String
  id: Int
}