---
description: 
globs: 
alwaysApply: false
---
# Pothos GraphQL Schema Development

This project uses **Pothos** for GraphQL schema building (migrated from Nexus). Pothos provides excellent TypeScript integration with Prisma.

## Pothos Builder Setup

The main builder is configured in [src/builder.ts](mdc:src/builder.ts):
- Uses `@pothos/plugin-prisma` for database integration
- Uses `@pothos/plugin-relay` for Relay-style pagination
- Includes custom DateTime scalar support
- Auto-generates types from [.pothos/types.d.ts](mdc:.pothos/types.d.ts)

## Schema Organization

All schema definitions are in [src/schema.ts](mdc:src/schema.ts):

### Object Types
```typescript
// Define Prisma-backed objects
builder.prismaObject('User', {
  fields: (t) => ({
    id: t.exposeInt('id'),
    email: t.exposeString('email'),
    posts: t.relation('posts'), // Auto-resolves Prisma relations
  }),
});
```

### Query Fields
```typescript
// Add query fields
builder.queryField('allUsers', (t) =>
  t.prismaField({
    type: ['User'],
    resolve: () => prisma.user.findMany(),
  })
);
```

### Mutation Fields
```typescript
// Add mutation fields
builder.mutationField('createDraft', (t) =>
  t.prismaField({
    type: 'Post',
    args: { data: t.arg({ type: PostCreateInput, required: true }) },
    resolve: (query, _parent, args, context) => {
      const userId = getUserId(context);
      return prisma.post.create({
        ...query, // Include Pothos query optimization
        data: { ...args.data, authorId: userId },
      });
    },
  })
);
```

## Key Pothos Patterns

### Root Types Required
```typescript
builder.queryType({});    // Required for schema
builder.mutationType({}); // Required for schema
```

### Input Types
```typescript
const PostCreateInput = builder.inputType('PostCreateInput', {
  fields: (t) => ({
    title: t.string({ required: true }),
    content: t.string(),
  }),
});
```

### Custom Scalars
```typescript
builder.scalarType('DateTime', {
  serialize: DateTimeResolver.serialize,
  parseValue: DateTimeResolver.parseValue,
  parseLiteral: DateTimeResolver.parseLiteral,
});
```

## Development Workflow

1. **Modify Prisma Schema**: Edit [prisma/schema.prisma](mdc:prisma/schema.prisma)
2. **Generate Types**: Run `bun run generate:prisma`
3. **Update GraphQL Schema**: Modify [src/schema.ts](mdc:src/schema.ts)
4. **Test**: Server auto-restarts with new schema

## Pothos vs Nexus Migration Notes

- **Old Nexus**: `objectType({ name: 'User', definition(t) => {} })`
- **New Pothos**: `builder.prismaObject('User', { fields: (t) => {} })`
- **Relations**: Use `t.relation('fieldName')` instead of manual resolvers
- **Arguments**: Use `t.arg.string()` instead of `stringArg()`
- **Prisma Integration**: Query optimization is automatic with `...query` spread
