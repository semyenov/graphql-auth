---
description: Authentication and authorization patterns
globs: ["src/context/**/*.ts", "src/permissions/**/*.ts", "src/schema/mutations/auth*.ts"]
alwaysApply: false
---
# Authentication and Authorization Patterns

This document outlines the patterns for handling authentication (who the user is) and authorization (what the user can do).

## 1. Authentication Guards

To enforce that a resolver requires an authenticated user, use the `requireAuthentication` guard from [`src/graphql/context/context.auth.ts`](mdc:src/graphql/context/context.auth.ts).

This function inspects the GraphQL context and will throw an `AuthenticationError` if the user is not logged in. This is the standard way to protect mutations and queries that require a user session.

### Usage

```typescript
import { requireAuthentication } from '../../graphql/context/context.auth'

// In a resolver:
builder.mutationField('someProtectedAction', (t) =>
  t.field({
    type: 'SomeType',
    resolve: async (_parent, args, context) => {
      // This will throw if the user is not authenticated.
      // The `userId` returned is a typed value object.
      const userId = requireAuthentication(context)

      // ... proceed with logic that requires a user
      return doSomething(userId.value)
    },
  }),
)
```

## 2. Authorization with Permission Rules (GraphQL Shield)

For fine-grained access control, we use GraphQL Shield, integrated via Pothos Scope Auth. Rules are defined in `src/graphql/middleware/rules.ts` and `src/modules/**/*.permissions.ts`.

### Key Principles for Rules

1.  **Rules Return Errors, Not Throw**: Inside a permission rule, you should return an error object instead of throwing it. The `handleRuleError` utility helps with this.
2.  **Graceful Error Handling**: Rules should anticipate potential issues (e.g., resource not found) and return appropriate errors.
3.  **Clarity and Specificity**: A rule should have a single, clear purpose.

### Example: Ownership Rule

This `isPostOwner` rule checks if the currently authenticated user is the author of a specific post.

```typescript
// Location: src/graphql/middleware/rules.ts

import { rule } from 'graphql-shield'
import { requireAuthentication } from '../../graphql/context/context.auth'
import { parseAndValidateGlobalId } from '../../core/utils/relay'
import { prisma } from '../../prisma'
import { NotFoundError, AuthorizationError } from '../../core/errors/types'
import { handleRuleError } from './rule-utils'

export const isPostOwner = rule({ cache: 'strict' })(
  async (_parent, args, context) => {
    try {
      // 1. Ensure user is authenticated
      const userId = requireAuthentication(context)

      // 2. Validate the incoming ID
      const postId = await parseAndValidateGlobalId(args.id, 'Post')

      // 3. Fetch the resource to check ownership
      const post = await prisma.post.findUnique({
        where: { id: postId },
        select: { authorId: true },
      })

      // 4. Handle "not found" case
      if (!post) {
        return new NotFoundError('Post', args.id)
      }

      // 5. Check ownership and return error if mismatched
      if (post.authorId !== userId.value) {
        return new AuthorizationError('You can only modify posts that you have created')
      }

      // 6. Return true if all checks pass
      return true
    } catch (error) {
      // 7. Normalize any unexpected errors
      return handleRuleError(error)
    }
  },
)
```