---
description: 
globs: 
alwaysApply: false
---
# GraphQL Auth Project Overview

This is a modern GraphQL authentication server built with advanced TypeScript typing and multiple API patterns.

## 🏗️ Architecture

**Core Technologies:**
- **H3** - Modern web framework for unified REST + GraphQL server
- **Apollo Server** - GraphQL server with schema-first approach
- **Bun** - Fast JavaScript runtime and package manager
- **Prisma** - Type-safe database ORM
- **GraphQL Tada** - Compile-time GraphQL type generation
- **fetchdts** - Type-safe HTTP request definitions

## 📁 Key Files

- [src/server.ts](mdc:src/server.ts) - Main H3 + Apollo server setup
- [src/context.ts](mdc:src/context.ts) - Typed context with GraphQL Tada queries
- [src/h3-routes.ts](mdc:src/h3-routes.ts) - REST API endpoints
- [src/schema.ts](mdc:src/schema.ts) - GraphQL schema definition
- [src/graphql-env.d.ts](mdc:src/graphql-env.d.ts) - Auto-generated GraphQL types
- [schema.graphql](mdc:schema.graphql) - GraphQL schema output
- [tsconfig.json](mdc:tsconfig.json) - TypeScript config with GraphQL Tada plugin

## 🔄 API Patterns

**GraphQL Endpoints:**
- `POST /graphql` - Main GraphQL API with full type safety

**REST Endpoints:**
- `GET /` - Welcome page with endpoint listing
- `GET /api/health` - Health check
- `GET /api/users` - List users
- `GET /api/posts` - Paginated posts
- `POST /api/posts/:id/view` - Increment views
- `GET /api/me` - Protected endpoint

## 🎯 Type Safety Features

1. **GraphQL Tada** - Queries are typed at compile time from schema
2. **fetchdts** - HTTP requests have typed paths, bodies, and responses  
3. **Prisma** - Database operations are fully typed
4. **Context Integration** - Request context combines all typing systems

## 🚀 Development Commands

- `bun run dev` - Start development server with watch mode
- `bun run generate` - Regenerate all types (Prisma + Nexus + GraphQL Tada)
- `bun run demo` - Run demo showing REST + GraphQL usage
- `bun run generate:gql` - Regenerate GraphQL Tada types only
