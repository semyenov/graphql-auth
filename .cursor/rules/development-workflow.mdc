---
description: 
globs: 
alwaysApply: false
---
# Development Workflow & Commands

This guide covers the development workflow for this GraphQL Auth server.

## Prerequisites

- **Bun** runtime (preferred over Node.js)
- **SQLite** database (file-based, no server required)
- **Environment Variables**: Create `.env` with `APP_SECRET`

## Development Commands

### Start Development Server
```bash
bun run dev                    # Start with auto-reload
bun run --bun src/server.ts    # Direct start with Bun runtime
```

### Database Management
```bash
bun run generate:prisma       # Generate Prisma client & Pothos types
bunx prisma migrate dev        # Create and apply database migrations
bunx prisma studio            # Open visual database browser
bunx prisma db seed           # Run seed script (if exists)
```

### Type Generation
```bash
bun run generate              # Generate all types (Prisma + GraphQL Tada)
bun run generate:gql          # Generate GraphQL Tada types only
```

### Build & Deploy
```bash
bun run build                 # Build production bundle
bun run start                 # Start production server
```

## File Change Workflows

### Adding New GraphQL Fields

1. **Update Prisma Schema** (if database changes needed):
   ```bash
   # Edit prisma/schema.prisma
   bunx prisma migrate dev --name "descriptive-name"
   ```

2. **Update GraphQL Schema**:
   ```typescript
   // In src/schema.ts, add new field
   builder.queryField('newField', (t) =>
     t.prismaField({
       type: 'YourType',
       resolve: () => prisma.yourModel.findMany(),
     })
   );
   ```

3. **Add Permissions** (if needed):
   ```typescript
   // In src/permissions/index.ts
   Query: {
     newField: rules.isAuthenticatedUser,
   }
   ```

### Adding New Database Models

1. **Define in Prisma**:
   ```prisma
   model NewModel {
     id        Int      @id @default(autoincrement())
     name      String
     createdAt DateTime @default(now())
   }
   ```

2. **Generate & Migrate**:
   ```bash
   bunx prisma migrate dev --name "add-new-model"
   ```

3. **Add to GraphQL Schema**:
   ```typescript
   builder.prismaObject('NewModel', {
     fields: (t) => ({
       id: t.exposeInt('id'),
       name: t.exposeString('name'),
       createdAt: t.expose('createdAt', { type: 'DateTime' }),
     }),
   });
   ```

## Testing Endpoints

### Using curl
```bash
# Public endpoint
curl -X POST http://localhost:3000/graphql \
  -H "Content-Type: application/json" \
  -d '{"query":"{ feed { id title } }"}'

# Authenticated endpoint
curl -X POST http://localhost:3000/graphql \
  -H "Authorization: Bearer YOUR_JWT_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{"query":"{ me { id name email } }"}'
```

### Using GraphQL Playground
- Visit `http://localhost:3000/graphql` in browser
- Use introspection to explore schema
- Set Authorization header for protected queries

## Common Issues & Solutions

### Database Connection Errors
```bash
# Reset database
rm prisma/dev.db
bunx prisma migrate dev
```

### Type Generation Issues
```bash
# Clean and regenerate all types
bun run generate:prisma
bun run generate:gql
```

### Server Won't Start
```bash
# Check for port conflicts
lsof -i :3000
pkill -f "bun.*server"  # Kill existing processes
```

### Permission Errors
- Check JWT token format in Authorization header
- Verify token includes correct `userId` claim
- Ensure user exists in database with correct ID

## Project Structure Guidelines

- **Single Schema File**: Keep all GraphQL definitions in [src/schema.ts](mdc:src/schema.ts)
- **Prisma-First**: Define database schema first, then GraphQL
- **Type Safety**: Always use generated types, avoid `any`
- **Permissions**: Add permissions for new protected fields
- **Testing**: Test both authenticated and public endpoints
