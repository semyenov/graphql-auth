---
description: 
globs: 
alwaysApply: false
---
# GraphQL Authentication Stack Guide

## Tech Stack Overview
This project uses a modern GraphQL authentication stack with enhanced type safety:

- **Runtime**: Bun (fast JavaScript runtime)
- **GraphQL Server**: Apollo Server with standalone setup
- **Type Safety**: fetchdts for HTTP/API typing + GraphQL Tada for GraphQL typing
- **Schema**: GraphQL schema with authentication mutations
- **Database**: Prisma ORM integration
- **Logging**: Consola for structured logging

## Key Files Structure

### Core Server Files
- [src/server.ts](mdc:src/server.ts) - Enhanced Apollo Server setup with fetchdts integration
- [src/context.ts](mdc:src/context.ts) - Type-safe GraphQL context with fetchdts types
- [src/schema.ts](mdc:src/schema.ts) - GraphQL schema definition
- [src/builder.ts](mdc:src/builder.ts) - Pothos GraphQL schema builder

### Configuration Files
- [package.json](mdc:package.json) - Bun-based project dependencies
- [tsconfig.json](mdc:tsconfig.json) - TypeScript configuration
- [bun.lockb](mdc:bun.lockb) - Bun lockfile for dependencies

### Generated Files
- [src/generate-schema.ts](mdc:src/generate-schema.ts) - Schema generation utilities
- [_docs/schema.graphql](mdc:_docs/schema.graphql) - Generated GraphQL schema

## Development Commands
- `bun run dev` - Start development server
- `bun run build` - Build the project
- `bun run generate` - Generate GraphQL schema
- `bun run start` - Start production server

## Type Safety Integration
The project leverages fetchdts for HTTP-level type safety and GraphQL Tada for GraphQL-level type safety, providing end-to-end type checking.
