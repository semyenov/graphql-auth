---
description: 
globs: 
alwaysApply: false
---
# GraphQL Tada Usage Guide

Complete guide for working with GraphQL Tada's compile-time typed GraphQL operations.

## üéØ Setup & Configuration

### TypeScript Plugin Configuration
[tsconfig.json](mdc:tsconfig.json) contains the GraphQL Tada plugin setup:

```json
{
  "compilerOptions": {
    "plugins": [
      {
        "name": "gql.tada/ts-plugin",
        "schema": "./schema.graphql",
        "tadaOutputLocation": "./src/graphql-env.d.ts"
      }
    ]
  }
}
```

### Generated Types
[src/graphql-env.d.ts](mdc:src/graphql-env.d.ts) contains auto-generated introspection types from your schema.

## üìù Query Definition Patterns

### Basic Query Definition
[src/context.ts](mdc:src/context.ts) shows the pattern:

```typescript
import { graphql, type ResultOf, type VariablesOf } from 'gql.tada'

export const GetMeQuery = graphql(`
  query GetMe {
    me {
      id
      email
      name
      posts {
        id
        title
        published
      }
    }
  }
`)
```

### Query with Variables
```typescript
export const GetFeedQuery = graphql(`
  query GetFeed($searchString: String, $skip: Int, $take: Int, $orderBy: PostOrderByUpdatedAtInput) {
    feed(searchString: $searchString, skip: $skip, take: $take, orderBy: $orderBy) {
      id
      title
      content
      published
      createdAt
      updatedAt
      viewCount
      author {
        id
        name
        email
      }
    }
  }
`)
```

### Mutations
```typescript
export const LoginMutation = graphql(`
  mutation Login($email: String!, $password: String!) {
    login(email: $email, password: $password) {
      token
      user {
        id
        email
        name
      }
    }
  }
`)
```

## üîß Type Extraction

### Extract Result Types
```typescript
export type GetMeResult = ResultOf<typeof GetMeQuery>
export type GetFeedResult = ResultOf<typeof GetFeedQuery>
export type LoginResult = ResultOf<typeof LoginMutation>
```

### Extract Variable Types
```typescript
export type GetFeedVariables = VariablesOf<typeof GetFeedQuery>
export type LoginVariables = VariablesOf<typeof LoginMutation>
```

## üîó Integration with fetchdts

### Combining with HTTP Types
In [src/context.ts](mdc:src/context.ts), GraphQL Tada types are integrated with fetchdts:

```typescript
interface GraphQLAPISchema {
  '/query/me': {
    [Endpoint]: {
      GET: {
        headers?: { authorization?: string }
        response: { data: GetMeResult } // Using GraphQL Tada type
      }
    }
  }
  '/mutation/login': {
    [Endpoint]: {
      POST: {
        body: LoginVariables // Using GraphQL Tada variables
        response: { data: LoginResult } // Using GraphQL Tada result
      }
    }
  }
}
```

## üöÄ Usage Patterns

### Client-side Usage
[src/h3-demo.ts](mdc:src/h3-demo.ts) demonstrates usage:

```typescript
import { print } from 'graphql'

async function executeQuery() {
  const response = await fetch('/graphql', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      query: print(GetMeQuery), // Convert to string
      variables: {} // Fully typed variables
    })
  })
  
  const result = await response.json() // Fully typed result
  return result
}
```

### Server-side Integration
[src/server.ts](mdc:src/server.ts) shows server-side execution:

```typescript
const result = await server.executeOperation(
  {
    query: body.query,
    variables: body.variables,
    operationName: body.operationName,
  },
  { contextValue: context }
)
```

## üìã Best Practices

### 1. Query Organization
- Define all queries in [src/context.ts](mdc:src/context.ts)
- Export both queries and their types
- Group related operations together

### 2. Type Extraction
```typescript
// Always extract types for reuse
export type MyQueryResult = ResultOf<typeof MyQuery>
export type MyQueryVariables = VariablesOf<typeof MyQuery>
```

### 3. Error Handling
```typescript
// Check for both data and errors
if (result.data?.me) {
  // Success case - fully typed
} else if (result.errors) {
  // Handle GraphQL errors
}
```

### 4. Fragment Usage
```typescript
const UserFragment = graphql(`
  fragment UserInfo on User {
    id
    email
    name
  }
`)

const GetUserQuery = graphql(`
  query GetUser($id: Int!) {
    user(id: $id) {
      ...UserInfo
    }
  }
`, [UserFragment])
```

## ‚ö° Development Workflow

1. **Modify Schema**: Update [src/schema.ts](mdc:src/schema.ts)
2. **Regenerate Types**: Run `bun run generate:gql`
3. **Define Queries**: Add to [src/context.ts](mdc:src/context.ts)
4. **Extract Types**: Export `ResultOf` and `VariablesOf` types
5. **Use in Code**: Import and use with full type safety

## üîç Troubleshooting

- **Types not updating**: Run `bun run generate:gql`
- **Query errors**: Check against [schema.graphql](mdc:schema.graphql)
- **Import issues**: Ensure [src/graphql-env.d.ts](mdc:src/graphql-env.d.ts) exists
- **Plugin issues**: Restart TypeScript server in your editor
